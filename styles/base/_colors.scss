/*
  color functions + mixins
*/

@function contrast($color, $dark: color(text, dark), $light: color(text, light)) {
  @if (lightness($color) > 67) {
    @return $dark;
  } @else {
    @return $light;
  }
}

@mixin contrast($color, $dark: color(text, dark), $light: color(text, light)) {
  background: $color;
  color: contrast($color, $dark, $light);
}


/* primary + neutral colors */
$-meadow: #3e9d9d;
$-cloud: #fbfbfd;
$-pebble: #37454e;
$-storm: #68808f;

/* auxilliary colours */
$-grass: #69bda3;
$-sky: #699dbd;
$-peach: #f7d87f;
$-watermelon: #f77f7f;


/* initial color map */
$colors: (
  primary: $-meadow,
  black: $-pebble,
  neutral: $-storm,
  white: $-cloud,

  success: $-grass,
  info: $-sky,
  danger: $-watermelon,
  warning: $-peach,
  
  neutrals: (
    100: lighten($-storm, 48),
    200: lighten($-storm, 43),
    300: lighten($-storm, 38),
    400: lighten($-storm, 28),
    500: lighten($-storm, 18),
    600: lighten($-storm, 9),
    700: $-storm,
  ),
);


/* color getter function */
@function color($keys...) {
  @if (nth($keys, 1) == neutral and length($keys) > 1) {
    @return map-get(map-get($colors, neutrals), nth($keys, 2));
  }

  $value: $colors;

  @each $key in $keys {
    $value: map-get($value, $key);
  }

  @return $value;
}


/* additional colors */
$colors: map-merge($colors, (
  text: (
    dark: rgba(color(black), .8),
    dark-accent: color(black),
    dark-subtle: rgba(color(black), .6),

    light: rgba(color(white), .8),
    light-accent: color(white),
    light-subtle: rgba(color(white), .6),
  ),
));
